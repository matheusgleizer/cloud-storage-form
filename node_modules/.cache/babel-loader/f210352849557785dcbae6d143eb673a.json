{"ast":null,"code":"var _jsxFileName = \"/home/dcil164/Documents/cloud-storage-form/src/components/form/form.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  lastName: yup.string().required(\"Last name is required.\"),\n  firstName: yup.string().required(\"First name is required.\"),\n  email: yup.string().email(\"E-mail not valid.\").required(\"E-mail is required.\"),\n  address: yup.string().required(\"Address is required.\")\n});\n\nconst Form = () => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      parameters: {\n        duration: 12,\n        gigabytes: 5,\n        upfrontPayment: \"No\"\n      },\n      userData: {\n        lastName: \"\",\n        firstName: \"\",\n        email: \"\",\n        address: \"\"\n      },\n      creditCard: {\n        number: \"\",\n        expiration: \"\",\n        securityCode: \"\"\n      }\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"email\",\n        name: \"email\",\n        label: \"Email\",\n        value: formik.values.email,\n        onChange: formik.handleChange,\n        error: formik.touched.email && Boolean(formik.errors.email),\n        helperText: formik.touched.email && formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"password\",\n        name: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        value: formik.values.password,\n        onChange: formik.handleChange,\n        error: formik.touched.password && Boolean(formik.errors.password),\n        helperText: formik.touched.password && formik.errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/dcil164/Documents/cloud-storage-form/src/components/form/form.jsx"],"names":["React","useFormik","yup","Button","TextField","validationSchema","object","lastName","string","required","firstName","email","address","Form","formik","initialValues","parameters","duration","gigabytes","upfrontPayment","userData","creditCard","number","expiration","securityCode","onSubmit","values","alert","JSON","stringify","handleSubmit","handleChange","touched","Boolean","errors","password"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;AAEA,MAAMC,gBAAgB,GAAGH,GAAG,CAACI,MAAJ,CAAW;AAClCC,EAAAA,QAAQ,EAAEL,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,wBAAtB,CADwB;AAElCC,EAAAA,SAAS,EAAER,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CAFuB;AAGlCE,EAAAA,KAAK,EAAET,GAAG,CACPM,MADI,GAEJG,KAFI,CAEE,mBAFF,EAGJF,QAHI,CAGK,qBAHL,CAH2B;AAOlCG,EAAAA,OAAO,EAAEV,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB;AAPyB,CAAX,CAAzB;;AAUA,MAAMI,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAMC,MAAM,GAAGb,SAAS,CAAC;AACvBc,IAAAA,aAAa,EAAE;AACbC,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,EADA;AAEVC,QAAAA,SAAS,EAAE,CAFD;AAGVC,QAAAA,cAAc,EAAE;AAHN,OADC;AAObC,MAAAA,QAAQ,EAAE;AACRb,QAAAA,QAAQ,EAAE,EADF;AAERG,QAAAA,SAAS,EAAE,EAFH;AAGRC,QAAAA,KAAK,EAAE,EAHC;AAIRC,QAAAA,OAAO,EAAE;AAJD,OAPG;AAcbS,MAAAA,UAAU,EAAE;AACVC,QAAAA,MAAM,EAAE,EADE;AAEVC,QAAAA,UAAU,EAAE,EAFF;AAGVC,QAAAA,YAAY,EAAE;AAHJ;AAdC,KADQ;AAqBvBnB,IAAAA,gBAAgB,EAAEA,gBArBK;AAsBvBoB,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AACpBC,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACD;AAxBsB,GAAD,CAAxB;AA2BA,sBACE;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEZ,MAAM,CAACgB,YAAvB;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,KAAK,EAAC,OAJR;AAKE,QAAA,KAAK,EAAEhB,MAAM,CAACY,MAAP,CAAcf,KALvB;AAME,QAAA,QAAQ,EAAEG,MAAM,CAACiB,YANnB;AAOE,QAAA,KAAK,EAAEjB,MAAM,CAACkB,OAAP,CAAerB,KAAf,IAAwBsB,OAAO,CAACnB,MAAM,CAACoB,MAAP,CAAcvB,KAAf,CAPxC;AAQE,QAAA,UAAU,EAAEG,MAAM,CAACkB,OAAP,CAAerB,KAAf,IAAwBG,MAAM,CAACoB,MAAP,CAAcvB;AARpD;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAC,UAJR;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,KAAK,EAAEG,MAAM,CAACY,MAAP,CAAcS,QANvB;AAOE,QAAA,QAAQ,EAAErB,MAAM,CAACiB,YAPnB;AAQE,QAAA,KAAK,EAAEjB,MAAM,CAACkB,OAAP,CAAeG,QAAf,IAA2BF,OAAO,CAACnB,MAAM,CAACoB,MAAP,CAAcC,QAAf,CAR3C;AASE,QAAA,UAAU,EAAErB,MAAM,CAACkB,OAAP,CAAeG,QAAf,IAA2BrB,MAAM,CAACoB,MAAP,CAAcC;AATvD;AAAA;AAAA;AAAA;AAAA,cAXF,eAsBE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,OAAO,EAAC,WAAhC;AAA4C,QAAA,SAAS,MAArD;AAAsD,QAAA,IAAI,EAAC,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA1DD;;GAAMtB,I;UACWZ,S;;;KADXY,I;AA4DN,eAAeA,IAAf","sourcesContent":["import React from \"react\";\nimport {useFormik} from \"formik\";\nimport * as yup from \"yup\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst validationSchema = yup.object({\n  lastName: yup.string().required(\"Last name is required.\"),\n  firstName: yup.string().required(\"First name is required.\"),\n  email: yup\n    .string()\n    .email(\"E-mail not valid.\")\n    .required(\"E-mail is required.\"),\n  address: yup.string().required(\"Address is required.\"),\n});\n\nconst Form = () => {\n  const formik = useFormik({\n    initialValues: {\n      parameters: {\n        duration: 12,\n        gigabytes: 5,\n        upfrontPayment: \"No\",\n      },\n\n      userData: {\n        lastName: \"\",\n        firstName: \"\",\n        email: \"\",\n        address: \"\",\n      },\n\n      creditCard: {\n        number: \"\",\n        expiration: \"\",\n        securityCode: \"\",\n      },\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          fullWidth\n          id='email'\n          name='email'\n          label='Email'\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n        <TextField\n          fullWidth\n          id='password'\n          name='password'\n          label='Password'\n          type='password'\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n        <Button color='primary' variant='contained' fullWidth type='submit'>\n          Submit\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}